schema {
  query: Query
  mutation: Mutations
}

type Account {
  id: Uuid!
  time: NaiveDateTime!
  name: String!
  description: String
  balance: Float!
  preAllocation: PreAllocation
  earning: Earning
  isAvailable: Boolean!
  inTrash: Boolean!
}

type Earning {
  rate: Float!
  index: EarningIndex!
}

enum EarningIndex {
  CDI
  FIXED
  IPCA
}

input EarningInput {
  rate: Float!
  index: EarningIndex!
}

type Integration {
  id: Uuid!
  name: String!
  time: NaiveDateTime!
}

type Mutations {
  createAccount(token: String!, account: NewAccount!): Account!
  editAccount(token: String!, id: Uuid!, updatedAccount: UpdatedAccount!): Account!
  deleteAccount(token: String!, id: Uuid!): Uuid!
  preAllocate(token: String!, from: Uuid!, to: Uuid!, amount: Float!): PreAllocation!
  createUser(username: String!, name: String!, email: String!): User!
  sendLoginCode(email: String!): String!
  deleteUser(token: String!): User!
  createTransaction(token: String!, transaction: NewTransaction!): Transaction!
  createIntegration(token: String!, name: String!, time: NaiveDateTime!): Integration!
  deleteIntegration(token: String!, id: Uuid!): Integration!
}

"""NaiveDate"""
scalar NaiveDate

"""NaiveDateTime"""
scalar NaiveDateTime

input NewAccount {
  time: NaiveDateTime!
  initialBalance: Float!
  name: String!
  description: String
  preAllocation: PreAllocationInput
  earning: EarningInput
  isAvailable: Boolean!
}

input NewTransaction {
  entryDate: NaiveDate!
  entryAccountCode: String
  exitAccountCode: String
  amount: Float!
  description: String
}

enum Order {
  ASC
  DESC
}

type PreAllocation {
  amount: Float!
  accumulative: Boolean!
}

input PreAllocationInput {
  amount: Float
  accumulative: Boolean
}

type Query {
  apiVersion: String!
  account(token: String!, id: Uuid!): Account!
  accounts(token: String!, order: Order, pageSize: Int, page: Int!, isPreAllocation: Boolean!, inTrash: Boolean!, tags: [Uuid!]): [Account!]!
  transactions(token: String!): [Transaction!]!
  me(token: String!): User!
  token(email: String!, loginCode: Int!): String!
}

type Transaction {
  id: Uuid!
  relatedUser: Uuid!
  entryDate: NaiveDate!
  entryAccountCode: String
  exitAccountCode: String
  amount: Float!
  description: String
}

input UpdatedAccount {
  name: String
  description: String
  preAllocation: PreAllocationInput
  earning: EarningInput
  isAvailable: Boolean
  inTrash: Boolean
}

type User {
  id: Uuid!
  username: String!
  name: String!
  email: String!
  integrations: [Integration!]!
  payday: Int
}

"""Uuid"""
scalar Uuid

